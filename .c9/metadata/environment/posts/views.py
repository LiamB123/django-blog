{"filter":false,"title":"views.py","tooltip":"/posts/views.py","undoManager":{"mark":15,"position":15,"stack":[[{"start":{"row":0,"column":0},"end":{"row":43,"column":0},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404, redirect ","from django.utils import timezone ","from .models import Post ","from .forms import BlogPostForm","","def get_posts(request):","    \"\"\"","    Create a view that will return a list of posts that were published ","    prior to \"now\"","    \"\"\"","    ","    posts = Post.object.filter(published_date__lte = timezone.now()).order_by(\"-published_date\")","    return render(request, \"blogposts.html\", {'posts':posts})","    ","    ","def post_detail(request, pk):","    \"\"\"","    Create a view that returns a single ","    post object based on  the post ID (pk) and ","    render it to the 'postdetail.html template ,","    or return a 404 error if the post is not found","    \"\"\"","    ","    post =get_object_or_404(Post, pk=pk)","    post.views+=1","    post.save()","    return render(request, 'postdetail.html', {'post':post})","    ","def create_or_edit_post(request, pk=None):","    \"\"\"","    Create a view that allows us to create or","    edit a post depending on if the post ID is null or not ","    \"\"\"","    post = get_object_or_404(Post, pk=pk) if pk else None","    if request.method==\"POST\":","        form=BlogPostForm(request.POST, request.FILES, instance=post)","        if form.is_valid():","            post=form.save()","            return redirect(post_detail, post.pk)","    else:","        form=BlogPostForm(instance=post)","    return render(request, 'blogpostform.html', {'form':form})","    ",""],"id":481},{"start":{"row":0,"column":0},"end":{"row":45,"column":63},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404, redirect","from django.utils import timezone","from .models import Post","from .forms import BlogPostForm","","","def get_posts(request):","    \"\"\"","    Create a view that will return a list","    of Posts that were published prior to 'now'","    and render them to the 'blogposts.html' template","    \"\"\"","    posts = Post.objects.filter(published_date__lte=timezone.now()","        ).order_by('-published_date')","    return render(request, \"blogposts.html\", {'posts': posts})","","","def post_detail(request, pk):","    \"\"\"","    Create a view that returns a single","    Post object based on the post ID (pk) and","    render it to the 'postdetail.html' template.","    Or return a 404 error if the post is","    not found","    \"\"\"","    post = get_object_or_404(Post, pk=pk)","    post.views += 1","    post.save()","    return render(request, \"postdetail.html\", {'post': post})","","","def create_or_edit_post(request, pk=None):","    \"\"\"","    Create a view that allows us to create","    or edit a post depending if the Post ID","    is null or not","    \"\"\"","    post = get_object_or_404(Post, pk=pk) if pk else None","    if request.method == \"POST\":","        form = BlogPostForm(request.POST, request.FILES, instance=post)","        if form.is_valid():","            post = form.save()","            return redirect(post_detail, post.pk)","    else:","        form = BlogPostForm(instance=post)","    return render(request, 'blogpostform.html', {'form': form})"]}],[{"start":{"row":0,"column":0},"end":{"row":45,"column":63},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404, redirect","from django.utils import timezone","from .models import Post","from .forms import BlogPostForm","","","def get_posts(request):","    \"\"\"","    Create a view that will return a list","    of Posts that were published prior to 'now'","    and render them to the 'blogposts.html' template","    \"\"\"","    posts = Post.objects.filter(published_date__lte=timezone.now()","        ).order_by('-published_date')","    return render(request, \"blogposts.html\", {'posts': posts})","","","def post_detail(request, pk):","    \"\"\"","    Create a view that returns a single","    Post object based on the post ID (pk) and","    render it to the 'postdetail.html' template.","    Or return a 404 error if the post is","    not found","    \"\"\"","    post = get_object_or_404(Post, pk=pk)","    post.views += 1","    post.save()","    return render(request, \"postdetail.html\", {'post': post})","","","def create_or_edit_post(request, pk=None):","    \"\"\"","    Create a view that allows us to create","    or edit a post depending if the Post ID","    is null or not","    \"\"\"","    post = get_object_or_404(Post, pk=pk) if pk else None","    if request.method == \"POST\":","        form = BlogPostForm(request.POST, request.FILES, instance=post)","        if form.is_valid():","            post = form.save()","            return redirect(post_detail, post.pk)","    else:","        form = BlogPostForm(instance=post)","    return render(request, 'blogpostform.html', {'form': form})"],"id":482},{"start":{"row":0,"column":0},"end":{"row":45,"column":63},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404, redirect","from django.utils import timezone","from .models import Post","from .forms import BlogPostForm","","","def get_posts(request):","    \"\"\"","    Create a view that will return a list","    of Posts that were published prior to 'now'","    and render them to the 'blogposts.html' template","    \"\"\"","    posts = Post.objects.filter(published_date__lte=timezone.now()","        ).order_by('-published_date')","    return render(request, \"blogposts.html\", {'posts': posts})","","","def post_detail(request, pk):","    \"\"\"","    Create a view that returns a single","    Post object based on the post ID (pk) and","    render it to the 'postdetail.html' template.","    Or return a 404 error if the post is","    not found","    \"\"\"","    post = get_object_or_404(Post, pk=pk)","    post.views += 1","    post.save()","    return render(request, \"postdetail.html\", {'post': post})","","","def create_or_edit_post(request, pk=None):","    \"\"\"","    Create a view that allows us to create","    or edit a post depending if the Post ID","    is null or not","    \"\"\"","    post = get_object_or_404(Post, pk=pk) if pk else None","    if request.method == \"POST\":","        form = BlogPostForm(request.POST, request.FILES, instance=post)","        if form.is_valid():","            post = form.save()","            return redirect(post_detail, post.pk)","    else:","        form = BlogPostForm(instance=post)","    return render(request, 'blogpostform.html', {'form': form})"]}],[{"start":{"row":3,"column":31},"end":{"row":3,"column":32},"action":"insert","lines":["s"],"id":483}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":32},"action":"remove","lines":["from .forms import BlogPostForms"],"id":484}],[{"start":{"row":1,"column":33},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":485}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":32},"action":"insert","lines":["from .forms import BlogPostForms"],"id":486}],[{"start":{"row":2,"column":31},"end":{"row":2,"column":32},"action":"remove","lines":["s"],"id":487}],[{"start":{"row":44,"column":4},"end":{"row":44,"column":8},"action":"insert","lines":["    "],"id":488}],[{"start":{"row":44,"column":4},"end":{"row":44,"column":8},"action":"remove","lines":["    "],"id":489}],[{"start":{"row":45,"column":4},"end":{"row":45,"column":8},"action":"remove","lines":["    "],"id":490}],[{"start":{"row":45,"column":4},"end":{"row":45,"column":8},"action":"insert","lines":["    "],"id":491}],[{"start":{"row":2,"column":30},"end":{"row":2,"column":31},"action":"remove","lines":["m"],"id":492},{"start":{"row":2,"column":29},"end":{"row":2,"column":30},"action":"remove","lines":["r"]},{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"remove","lines":["o"]},{"start":{"row":2,"column":27},"end":{"row":2,"column":28},"action":"remove","lines":["F"]}],[{"start":{"row":2,"column":27},"end":{"row":2,"column":28},"action":"insert","lines":["F"],"id":493},{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"insert","lines":["p"]},{"start":{"row":2,"column":29},"end":{"row":2,"column":30},"action":"insert","lines":["r"]},{"start":{"row":2,"column":30},"end":{"row":2,"column":31},"action":"insert","lines":["m"]},{"start":{"row":2,"column":31},"end":{"row":2,"column":32},"action":"insert","lines":[","]}],[{"start":{"row":2,"column":31},"end":{"row":2,"column":32},"action":"remove","lines":[","],"id":494},{"start":{"row":2,"column":30},"end":{"row":2,"column":31},"action":"remove","lines":["m"]},{"start":{"row":2,"column":29},"end":{"row":2,"column":30},"action":"remove","lines":["r"]},{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"remove","lines":["p"]}],[{"start":{"row":2,"column":28},"end":{"row":2,"column":29},"action":"insert","lines":["o"],"id":495},{"start":{"row":2,"column":29},"end":{"row":2,"column":30},"action":"insert","lines":["r"]},{"start":{"row":2,"column":30},"end":{"row":2,"column":31},"action":"insert","lines":["m"]}],[{"start":{"row":0,"column":0},"end":{"row":46,"column":63},"action":"remove","lines":["from django.shortcuts import render, get_object_or_404, redirect","from django.utils import timezone","from .forms import BlogPostForm","from .models import Post","","","","def get_posts(request):","    \"\"\"","    Create a view that will return a list","    of Posts that were published prior to 'now'","    and render them to the 'blogposts.html' template","    \"\"\"","    posts = Post.objects.filter(published_date__lte=timezone.now()","        ).order_by('-published_date')","    return render(request, \"blogposts.html\", {'posts': posts})","","","def post_detail(request, pk):","    \"\"\"","    Create a view that returns a single","    Post object based on the post ID (pk) and","    render it to the 'postdetail.html' template.","    Or return a 404 error if the post is","    not found","    \"\"\"","    post = get_object_or_404(Post, pk=pk)","    post.views += 1","    post.save()","    return render(request, \"postdetail.html\", {'post': post})","","","def create_or_edit_post(request, pk=None):","    \"\"\"","    Create a view that allows us to create","    or edit a post depending if the Post ID","    is null or not","    \"\"\"","    post = get_object_or_404(Post, pk=pk) if pk else None","    if request.method == \"POST\":","        form = BlogPostForm(request.POST, request.FILES, instance=post)","        if form.is_valid():","            post = form.save()","            return redirect(post_detail, post.pk)","    else:","        form = BlogPostForm(instance=post)","    return render(request, 'blogpostform.html', {'form': form})"],"id":496},{"start":{"row":0,"column":0},"end":{"row":45,"column":63},"action":"insert","lines":["from django.shortcuts import render, get_object_or_404, redirect","from django.utils import timezone","from .models import Post","from .forms import BlogPostForm","","","def get_posts(request):","    \"\"\"","    Create a view that will return a list","    of Posts that were published prior to 'now'","    and render them to the 'blogposts.html' template","    \"\"\"","    posts = Post.objects.filter(published_date__lte=timezone.now()","        ).order_by('-published_date')","    return render(request, \"blogposts.html\", {'posts': posts})","","","def post_detail(request, pk):","    \"\"\"","    Create a view that returns a single","    Post object based on the post ID (pk) and","    render it to the 'postdetail.html' template.","    Or return a 404 error if the post is","    not found","    \"\"\"","    post = get_object_or_404(Post, pk=pk)","    post.views += 1","    post.save()","    return render(request, \"postdetail.html\", {'post': post})","","","def create_or_edit_post(request, pk=None):","    \"\"\"","    Create a view that allows us to create","    or edit a post depending if the Post ID","    is null or not","    \"\"\"","    post = get_object_or_404(Post, pk=pk) if pk else None","    if request.method == \"POST\":","        form = BlogPostForm(request.POST, request.FILES, instance=post)","        if form.is_valid():","            post = form.save()","            return redirect(post_detail, post.pk)","    else:","        form = BlogPostForm(instance=post)","    return render(request, 'blogpostform.html', {'form': form})"]}]]},"ace":{"folds":[],"scrolltop":231,"scrollleft":0,"selection":{"start":{"row":45,"column":63},"end":{"row":45,"column":63},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":4,"state":"start","mode":"ace/mode/python"}},"timestamp":1571137329995,"hash":"ad61df8521ce8d372928be78693484a510ac6c41"}